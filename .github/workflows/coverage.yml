name: Code Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libarmadillo-dev \
          libopenblas-dev \
          liblapack-dev \
          libarpack2-dev \
          libsuperlu-dev \
          python3-dev \
          python3-pip \
          build-essential \
          cmake \
          lcov

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pybind11

    - name: Configure CMake with coverage
      run: |
        # Create symbolic link for Armadillo
        sudo ln -s /usr/lib/x86_64-linux-gnu/libarmadillo.so.12 /usr/lib/x86_64-linux-gnu/libarmadillo.so
        # Get Python paths
        PYTHON_INCLUDE_DIR=$(python -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")
        PYTHON_LIBRARY=$(python -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage -O0 -g" \
          -DCMAKE_C_FLAGS="--coverage -O0 -g" \
          -DPYTHON_EXECUTABLE=$(which python) \
          -DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE_DIR} \
          -DPYTHON_LIBRARY=${PYTHON_LIBRARY} \
          -Dpybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")

    - name: Build
      run: cmake --build build --config Debug -j2

    - name: Install Python package
      run: |
        pip install -e .
        python -c "import dlf; print('Package loaded successfully')"

    - name: Run tests with coverage
      working-directory: build
      run: |
        ctest --output-on-failure
        cd ..
        python -m pytest tests/pytests --cov=dlf --cov-report=xml

    - name: Generate C++ coverage report
      run: |
        cd build
        # Create lcov configuration file
        echo "geninfo_unexecuted_blocks=1" > .lcovrc
        echo "lcov_branch_coverage=1" >> .lcovrc
        echo "lcov_function_coverage=1" >> .lcovrc
        echo "lcov_exclude_line=0" >> .lcovrc
        # Generate coverage data
        lcov --config-file .lcovrc --capture --directory . --output-file coverage.info --ignore-errors mismatch
        # Remove unwanted files
        lcov --config-file .lcovrc --remove coverage.info '/usr/*' '/opt/*' '*/tests/*' '*/build/*' --output-file coverage.info
        # List coverage information
        lcov --config-file .lcovrc --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./build/coverage.info,./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false 